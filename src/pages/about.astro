---
// layout
import BaseLayout from "@/layouts/BaseLayout.astro";
// assets
import selfLaugh from "../images/self-laugh.png";
import selfNormal from "../images/self-normal.png";
import { Button } from "@/components/ui/button";
// react icons
import { FaCheck, FaX, FaLine } from "react-icons/fa6";
---

<BaseLayout pageTitle="關於我">
  <section class="mb-11">
    <canvas id="confetti"></canvas>
    <div class="w-72 h-72 mx-auto">
      <img
        src={selfNormal.src}
        alt="self portrait normal"
        id="self-normal"
        class="w-full h-full object-cover"
      />
      <img
        src={selfLaugh.src}
        alt="self portrait happy"
        id="self-laugh"
        class="hidden w-full h-full object-cover"
      />
    </div>
    <div class="w-fit flex flex-col items-center mx-auto gap-5">
      <h1 class="text-4xl font-semibold tracking-wider">
        哈囉，我叫<strong class="text-red-500">"蘿蔔🥕"</strong>
      </h1>
      <h2 class="text-3xl font-semibold">
        我<span id="typewriter"></span><span id="cursor">|</span>
      </h2>
      <p class="text-lg text-center" id="introduction">
        我是個宅宅公務員，興趣是逛街、吃美食、程式設計、看動畫、打桌球，願意改天喝個咖啡認識一下嗎？
      </p>
      <div class="grid gap-2 mt-2 hidden" id="agree-section">
        <div class="flex gap-2 items-center justify-center">
          <FaLine className="text-green-400" size={30} /><span
            class="text-xl font-semibold">johngenius</span
          >
        </div>
        <p class="text-lg">
          備註：如果不想來往，請直接將我<strong class="text-red-500"
            >封鎖</strong
          >，沒關係的😂
        </p>
      </div>
      <div class="grid gap-2 mt-2 hidden" id="disagree-section">
        <div class="flex gap-2 items-center justify-center">
          <span class="text-xl">沒關係的～祝你有美好的一天！！！😂</span>
        </div>
      </div>
      <div class="flex gap-7">
        <Button id="agree" className="text-lg"
          ><FaCheck /><span class="ml-1">OK</span>
          <Button id="disagree" className="text-lg" variant="destructive"
            ><FaX /><span class="ml-1">No</span></Button
          >
        </Button>
      </div>
    </div>
  </section>

  <style>
    #cursor {
      color: black;
      animation: blink 1s linear infinite;
    }
    @keyframes blink {
      0% {
        opacity: 100%;
      }
      50% {
        opacity: 0%;
      }
    }
  </style>

  <script>
    const selfPortraitNormal = document.getElementById("self-normal");
    const selfPortraitLaugh = document.getElementById("self-laugh");
    const agreeBtn = document.getElementById("agree");
    const disagreeBtn = document.getElementById("disagree");
    const introduction = document.getElementById("introduction");
    const agreeSection = document.getElementById("agree-section");
    const disagreeSection = document.getElementById("disagree-section");

    import JSConfetti from "js-confetti";

    const jsConfetti = new JSConfetti();

    agreeBtn?.addEventListener("click", () => {
      selfPortraitNormal?.classList.add("hidden");
      selfPortraitLaugh?.classList.remove("hidden");
      introduction?.classList.add("hidden");
      agreeSection?.classList.remove("hidden");
      disagreeSection?.classList.add("hidden");
      jsConfetti.addConfetti();
    });
    disagreeBtn?.addEventListener("click", () => {
      selfPortraitLaugh?.classList.add("hidden");
      selfPortraitNormal?.classList.remove("hidden");
      disagreeSection?.classList.remove("hidden");
      agreeSection?.classList.add("hidden");
    });

    const phrases = [
      "不是怪人",
      "不花心！",
      "頗有好奇心～",
      "說話很real",
      "常常放空...",
    ];
    const typewriter = document.getElementById("typewriter") as HTMLElement;
    const sleep = async (ms: number): Promise<void> => {
      return new Promise((resolve) => setTimeout(resolve, ms));
    };
    const sleepTime = 1000;
    let currentPhraseIndex = 0;
    const typeLoop = async () => {
      while (true) {
        let currentWord = phrases[currentPhraseIndex];
        for (let i = 0; i < currentWord.length; i++) {
          typewriter.innerText = currentWord.substring(0, i + 1);
          await sleep(200);
        }
        await sleep(sleepTime);
        for (let i = currentWord.length; i > 0; i--) {
          typewriter.innerText = currentWord.substring(0, i - 1);
          await sleep(200);
        }
        currentPhraseIndex += 1;
        if (currentPhraseIndex === phrases.length) {
          currentPhraseIndex = 0;
        }
      }
    };
    typeLoop();
  </script>
</BaseLayout>
